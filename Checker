local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local checkerActive = false
local checkerRunning = false
local localAircraftFound = false

local AircraftModels = {}
local AircraftLabels = {}
local aircraftConnections = {}
local pendingAircraftQueue = {}

local toggleGui = Instance.new("ScreenGui")
toggleGui.Name = "ToggleGui"
toggleGui.ResetOnSpawn = false
toggleGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local checkerButton = Instance.new("TextButton")
checkerButton.Name = "CheckerButton"
checkerButton.Text = "Checker"
checkerButton.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
checkerButton.TextColor3 = Color3.new(0, 0, 0)
checkerButton.BorderColor3 = Color3.new(0, 0, 0)
checkerButton.BorderSizePixel = 6
checkerButton.TextScaled = true
checkerButton.Font = Enum.Font.SourceSans
checkerButton.Size = UDim2.new(0.0511999987, 0, 0.0320000015, 0)
checkerButton.Position = UDim2.new(0, 1816, 0, 592)
checkerButton.Parent = toggleGui

local aircraftCheckerGui = Instance.new("ScreenGui")
aircraftCheckerGui.Name = "AircraftListGui"
aircraftCheckerGui.ResetOnSpawn = false
aircraftCheckerGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
aircraftCheckerGui.Enabled = false

local listFrame = Instance.new("Frame")
listFrame.Name = "AircraftListFrame"
listFrame.Size = UDim2.new(0, 200, 0, 300)
listFrame.Position = UDim2.new(0, 10, 0.5, -150)
listFrame.BackgroundTransparency = 0.8
listFrame.BackgroundColor3 = Color3.new(0, 0, 0)
listFrame.Parent = aircraftCheckerGui

local listLayout = Instance.new("UIListLayout")
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Parent = listFrame

local padding = Instance.new("UIPadding")
padding.PaddingTop = UDim.new(0, 5)
padding.PaddingBottom = UDim.new(0, 5)
padding.PaddingLeft = UDim.new(0, 5)
padding.PaddingRight = UDim.new(0, 5)
padding.Parent = listFrame

local function updateButtonPosition(found)
    if found then
        checkerButton.Position = UDim2.new(0, 1816, 0, 692)
        localAircraftFound = true
    else
        checkerButton.Position = UDim2.new(0, 1816, 0, 592)
        localAircraftFound = false
    end
end

local function hasForceField(model)
    for _, child in ipairs(model:GetChildren()) do
        if child.ClassName == "ForceField" and child.Name == "ForceField" then
            return true
        end
    end
    return false
end

local function getPlayerNameFromModelName(model)
    local name = model.Name:match("^(.-)Aircraft")
    return name and name ~= "" and name or "Unknown"
end

local function updateAircraftLabel(model)
    if not model or not model:IsDescendantOf(Workspace) then
        if AircraftLabels[model] then
            AircraftLabels[model]:Destroy()
            AircraftLabels[model] = nil
        end
        return
    end
    local playerName = getPlayerNameFromModelName(model)
    if playerName == LocalPlayer.Name or not string.find(model.Name, "Aircraft") then
        if AircraftLabels[model] then
            AircraftLabels[model]:Destroy()
            AircraftLabels[model] = nil
        end
        return
    end
    local nameColor = hasForceField(model) and Color3.new(1, 0, 0) or Color3.new(0, 1, 0)
    if AircraftLabels[model] then
        if AircraftLabels[model].Text ~= playerName then
            AircraftLabels[model].Text = playerName
        end
        AircraftLabels[model].TextColor3 = nameColor
    else
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0, 20)
        label.BackgroundTransparency = 1
        label.RichText = false
        label.TextScaled = true
        label.Text = playerName
        label.TextColor3 = nameColor
        label.LayoutOrder = 1
        label.Parent = listFrame
        AircraftLabels[model] = label
    end
end

local function registerAircraft(model)
    if model:IsA("Model") and string.find(model.Name, "Aircraft") then
        local playerName = getPlayerNameFromModelName(model)
        if playerName == LocalPlayer.Name then
            return
        end
        AircraftModels[model] = true
        task.spawn(function()
            task.wait(3)
            if checkerRunning then
                updateAircraftLabel(model)
            end
        end)
    end
end

local function processPendingAircraft()
    local batchSize = 2
    for _ = 1, batchSize do
        local model = table.remove(pendingAircraftQueue, 1)
        if model then
            registerAircraft(model)
        else
            break
        end
    end
end

local function checkForLocalAircraft()
    local found = false
    for _, model in ipairs(Workspace:GetDescendants()) do
        if model:IsA("Model") and model.Name == LocalPlayer.Name .. " Aircraft" then
            found = true
            break
        end
    end
    updateButtonPosition(found)
end

local function startAircraftChecker()
    checkerActive = true
    checkerRunning = true
    AircraftModels = {}
    AircraftLabels = {}
    pendingAircraftQueue = {}
    aircraftConnections = {}

    aircraftCheckerGui.Enabled = true

    for _, child in ipairs(listFrame:GetChildren()) do
        if child ~= listLayout and child ~= padding then
            child:Destroy()
        end
    end

    for _, model in ipairs(Workspace:GetDescendants()) do
        if model:IsA("Model") and string.find(model.Name, "Aircraft") then
            local playerName = getPlayerNameFromModelName(model)
            if model.Name == LocalPlayer.Name .. " Aircraft" then
                updateButtonPosition(true)
            end
            if playerName ~= LocalPlayer.Name then
                AircraftModels[model] = true
                task.spawn(function()
                    task.wait(3)
                    if checkerRunning then
                        updateAircraftLabel(model)
                    end
                end)
            end
        end
    end

    aircraftConnections.descendantAdded = Workspace.DescendantAdded:Connect(function(child)
        if child:IsA("Model") and string.find(child.Name, "Aircraft") then
            if child.Name == LocalPlayer.Name .. " Aircraft" then
                updateButtonPosition(true)
            elseif checkerRunning then
                table.insert(pendingAircraftQueue, child)
            end
        end
    end)

    aircraftConnections.descendantRemoving = Workspace.DescendantRemoving:Connect(function(child)
        if child:IsA("Model") and string.find(child.Name, "Aircraft") then
            if child.Name == LocalPlayer.Name .. " Aircraft" then
                task.spawn(function()
                    task.wait(1)
                    checkForLocalAircraft()
                end)
            end
            if AircraftModels[child] then
                AircraftModels[child] = nil
                if AircraftLabels[child] then
                    AircraftLabels[child]:Destroy()
                    AircraftLabels[child] = nil
                end
            end
        end
    end)

    aircraftConnections.updateLoop = task.spawn(function()
        while checkerRunning do
            processPendingAircraft()
            for model in pairs(AircraftModels) do
                updateAircraftLabel(model)
            end
            task.wait(2)
        end
    end)
end

local function stopAircraftChecker()
    checkerActive = false
    checkerRunning = false
    aircraftCheckerGui.Enabled = false

    for _, child in ipairs(listFrame:GetChildren()) do
        if child ~= listLayout and child ~= padding then
            child:Destroy()
        end
    end

    AircraftModels = {}
    AircraftLabels = {}
    pendingAircraftQueue = {}

    if aircraftConnections.descendantAdded then
        aircraftConnections.descendantAdded:Disconnect()
        aircraftConnections.descendantAdded = nil
    end
    if aircraftConnections.descendantRemoving then
        aircraftConnections.descendantRemoving:Disconnect()
        aircraftConnections.descendantRemoving = nil
    end
    if aircraftConnections.updateLoop then
        aircraftConnections.updateLoop:Cancel()
        aircraftConnections.updateLoop = nil
    end
end

checkerButton.MouseButton1Click:Connect(function()
    if not checkerActive then
        startAircraftChecker()
    else
        stopAircraftChecker()
    end
end)

task.spawn(function()
    while true do
        checkForLocalAircraft()
        task.wait(2)
    end
end)
