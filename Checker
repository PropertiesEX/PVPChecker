local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local running = true

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AircraftListGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local listFrame = Instance.new("Frame")
listFrame.Name = "AircraftListFrame"
listFrame.Size = UDim2.new(0, 200, 0, 300)
listFrame.Position = UDim2.new(0, 10, 0.5, -150)
listFrame.BackgroundTransparency = 0.8
listFrame.BackgroundColor3 = Color3.new(0, 0, 0)
listFrame.Parent = screenGui

local listLayout = Instance.new("UIListLayout")
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Parent = listFrame

local padding = Instance.new("UIPadding")
padding.PaddingTop = UDim.new(0, 5)
padding.PaddingBottom = UDim.new(0, 5)
padding.PaddingLeft = UDim.new(0, 5)
padding.PaddingRight = UDim.new(0, 5)
padding.Parent = listFrame

local AircraftModels = {}
local AircraftLabels = {}

local function hasForceField(model)
    for _, child in ipairs(model:GetChildren()) do
        if child.ClassName == "ForceField" and child.Name == "ForceField" then
            return true
        end
    end
    return false
end

local function getPlayerNameFromModelName(model)
    local name = model.Name:match("^(.-)Aircraft")
    return name and name ~= "" and name or "Unknown"
end

local function updateAircraftLabel(model)
    if not model or not model:IsDescendantOf(Workspace) then
        if AircraftLabels[model] then
            AircraftLabels[model]:Destroy()
            AircraftLabels[model] = nil
        end
        return
    end

    local playerName = getPlayerNameFromModelName(model)
    if playerName == LocalPlayer.Name or not string.find(model.Name, "Aircraft") then
        if AircraftLabels[model] then
            AircraftLabels[model]:Destroy()
            AircraftLabels[model] = nil
        end
        return
    end

    local nameColor = hasForceField(model) and Color3.new(1, 0, 0) or Color3.new(0, 1, 0)
    
    if AircraftLabels[model] then
        if AircraftLabels[model].Text ~= playerName then
            AircraftLabels[model].Text = playerName
        end
        AircraftLabels[model].TextColor3 = nameColor
    else
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0, 20)
        label.BackgroundTransparency = 1
        label.RichText = false
        label.TextScaled = true
        label.Text = playerName
        label.TextColor3 = nameColor
        label.LayoutOrder = 1
        label.Parent = listFrame
        AircraftLabels[model] = label
    end
end

local function registerAircraft(model)
    if model:IsA("Model") and string.find(model.Name, "Aircraft") then
        local playerName = getPlayerNameFromModelName(model)
        if playerName == LocalPlayer.Name then
            return
        end
        AircraftModels[model] = true
        task.spawn(function()
            task.wait(3)
            if running then
                updateAircraftLabel(model)
            end
        end)
    end
end

for _, model in ipairs(Workspace:GetDescendants()) do
    if model:IsA("Model") and string.find(model.Name, "Aircraft") then
        local playerName = getPlayerNameFromModelName(model)
        if playerName ~= LocalPlayer.Name then
            AircraftModels[model] = true
            task.spawn(function()
                task.wait(3)
                if running then
                    updateAircraftLabel(model)
                end
            end)
        end
    end
end

local descendantAddedConn = Workspace.DescendantAdded:Connect(function(child)
    if running and child:IsA("Model") and string.find(child.Name, "Aircraft") then
        task.spawn(function()
            task.wait(0.1)
            registerAircraft(child)
        end)
    end
end)

local descendantRemovingConn = Workspace.DescendantRemoving:Connect(function(child)
    if AircraftModels[child] then
        AircraftModels[child] = nil
        if AircraftLabels[child] then
            AircraftLabels[child]:Destroy()
            AircraftLabels[child] = nil
        end
    end
end)

local updateLoop = task.spawn(function()
    while running do
        for model in pairs(AircraftModels) do
            updateAircraftLabel(model)
        end
        task.wait(1)
    end
end)

local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Text = "Close"
closeButton.TextSize = 11
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.Size = UDim2.new(1, 0, 0, 15)
closeButton.BackgroundTransparency = 1
closeButton.LayoutOrder = 999
closeButton.Parent = listFrame

closeButton.MouseButton1Click:Connect(function()
    running = false
    descendantAddedConn:Disconnect()
    descendantRemovingConn:Disconnect()
    screenGui:Destroy()
    script:Destroy()
end)
